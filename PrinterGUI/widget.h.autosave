eventmou#ifndef WIDGET_H
#define WIDGET_H

#include <QWidget>
#include "xaxisr.h"
#include "xaxisl.h"
#include "yaxisr.h"
#include "yaxisl.h"

namespace Ui {
class Widget;
}

class QSpinBox;
/**
 * @brief The Widget class
 */
class Widget : public QWidget
{
    Q_OBJECT

public:
    explicit Widget(QWidget *parent = 0);
    ~Widget();

protected:
    /**
     * @brief mouseMoveEvent In this function, the mouse movements was recorded.
     * @param event when mouseMove happens, run this function.
     */
    void mouseMoveEvent(QMouseEvent *event);
    /**
     * @brief mousePressEvent In this function, mousePress is used to trigger the state of servo motor.
     * @param event when mousePress happens, run this function
     */
    void mousePressEvent(QMouseEvent *event);
    /**
     * @brief paintEvent generate image
     * @param event
     */
    void paintEvent(QPaintEvent *event);

protected slots:
    /**
     * @brief on_pushButton_clicked refresh button is defined. Once button is clicked, the paint board will be clear.
     */
    void on_pushButton_clicked();

private:
    /**
     * @brief configureSpinBox In this function, the spinBox is configured.
     * @param spinBox The name of spinBox
     * @param min     Define the min number displayed by spinBox.
     * @param max     Define the max number displayed by spinBox.
     */
    void configureSpinBox(QSpinBox *spinBox, int min, int max) const;
    /**
     * @brief onMouseEvent In this function, once mouseEvent happens, the current coordinates will be compared with previous coordinates.
     * Different threads will be trigger depending on the results of comparasion.
     * @param eventName the type of mouseEvent
     * @param pos
     */
    void onMouseEvent(const QString &eventName, const QPoint &pos);


    Ui::Widget *ui;
    //Motor rotate state threads
    /**
     * @brief xThreadr define the x right rotation thread.
     */
    xAxisR *xThreadr;
    /**
     * @brief xThreadl define x left rotation thread.
     */
    xAxisL *xThreadl;
    /**
     * @brief yThreadr define y right rotation thread.
     */
    yAxisR *yThreadr;
    /**
     * @brief yThreadl define y right rotation thread.
     */
    yAxisL *yThreadl;
    //painter variables
    /**
     * @brief m_image store the image of paint board.
     */
    QImage m_image;
    /**
     * @brief m_prevPoint define the previous point.
     */
    QPoint m_prevPoint;
    /**
     * @brief m_curPoint define the current point.
     */
    QPoint m_curPoint;
};

#endif // WIDGET_H
